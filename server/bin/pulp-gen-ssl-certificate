READ_PULP_CONF=\
$(cat << END
from pulp.server.config import config as pulp_conf
print pulp_conf.get('security', 'cakey')
print pulp_conf.get('security', 'cacert')
print pulp_conf.get('security', 'ssl_ca_certificate')
print pulp_conf.get('security', 'ssl_certificate_key')
print pulp_conf.get('security', 'ssl_certificate')
END
)

PULP_CONF=(`python -c "$READ_PULP_CONF"`)

TMP=/tmp/$RANDOM
CA_KEY=${PULP_CONF[0]}
CA_CRT=${PULP_CONF[1]}
SSL_CA_CRT=${PULP_CONF[2]}
SSL_CRT_KEY=${PULP_CONF[3]}
SSL_CRT=${PULP_CONF[4]}
SSL_CN=`hostname`
ORG="PULP"

if [ ! -f $CA_KEY ]; then
    echo "Pulp CA certificate key $CA_KEY not found. Please run 'pulp-gen-ca-certificate' first."
    exit
fi
if [ ! -f $CA_CRT ]; then
    echo "Pulp CA certificate $CA_CRT not found. Please run 'pulp-gen-ca-certificate' first."
    exit
fi

mkdir -p $TMP

# create a key for SSL cert
openssl genrsa -out $TMP/server.key 2048 &> /dev/null

# create a signing request for SSL cert
openssl req \
  -new \
  -key $TMP/server.key \
  -out $TMP/server.csr \
  -subj "/CN=$SSL_CN/O=$ORG" &> /dev/null

# create SSL cert signed by the above CA cert
openssl x509 \
  -req \
  -days 7035 \
  -CA $CA_CRT \
  -CAkey $CA_KEY \
  -set_serial 01 \
  -in $TMP/server.csr \
  -out $TMP/server.crt &> /dev/null

# install
cp $TMP/server.key $SSL_CRT_KEY
cp $TMP/server.crt $SSL_CRT
chown root:apache $SSL_CRT_KEY
chown root:apache $SSL_CRT
chmod 640 $SSL_CRT_KEY
chmod 640 $SSL_CRT
if [ $CA_CRT != $SSL_CA_CRT ]; then
    cp $CA_CRT $SSL_CA_CRT
    chown root:apache $SSL_CA_CRT
    chmod 640 $SSL_CA_CRT
fi

# clean
rm -rf $TMP
