#!/usr/bin/python
#
# Pulp client utility
# Copyright (c) 2010 Red Hat, Inc.
#
# This software is licensed to you under the GNU General Public License,
# version 2 (GPLv2). There is NO WARRANTY for this software, express or
# implied, including the implied warranties of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
# along with this software; if not, see
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
#
# Red Hat trademarks are not licensed under GPLv2. No permission is
# granted to use or replicate Red Hat trademarks that are incorporated
# in this software or its documentation.
#

from pulp.client.cli.admin import AdminCLI
from pulp.client.core import (
    auth, cds, consumer, consumergroup, errata, package,
    packagegroup, repo, user, distribution, permission, role, content)

def setup_admin(admin):
    auth_cmd = auth.Auth()
    auth_cmd.add_action('login', auth.Login())
    auth_cmd.add_action('logout', auth.Logout())
    admin.add_command('auth', auth_cmd)

    cds_cmd = cds.Cds()
    cds_cmd.add_action('register', cds.Register())
    cds_cmd.add_action('unregister', cds.Unregister())
    cds_cmd.add_action('associate_repo', cds.Associate())
    cds_cmd.add_action('unassociate_repo', cds.Unassociate())
    cds_cmd.add_action('list', cds.List())
    cds_cmd.add_action('history', cds.History())
    cds_cmd.add_action('sync', cds.Sync())
    cds_cmd.add_action('status', cds.Status())
    admin.add_command('cds', cds_cmd)

    consumer_cmd = consumer.Consumer()
    consumer_cmd.add_action('list', consumer.List())
    consumer_cmd.add_action('info', consumer.Info())
    consumer_cmd.add_action('delete', consumer.Delete())
    consumer_cmd.add_action('bind', consumer.Bind())
    consumer_cmd.add_action('unbind', consumer.Unbind())
    consumer_cmd.add_action('add_keyvalue', consumer.AddKeyValue())
    consumer_cmd.add_action('delete_keyvalue', consumer.DeleteKeyValue())
    consumer_cmd.add_action('update_keyvalue', consumer.UpdateKeyValue())
    consumer_cmd.add_action('get_keyvalues', consumer.GetKeyValues())
    consumer_cmd.add_action('history', consumer.History())
    admin.add_command('consumer', consumer_cmd)

    consumergroup_cmd = consumergroup.ConsumerGroup()
    consumergroup_cmd.add_action('list', consumergroup.List())
    consumergroup_cmd.add_action('create', consumergroup.Create())
    consumergroup_cmd.add_action('delete', consumergroup.Delete())
    consumergroup_cmd.add_action('add_consumer', consumergroup.AddConsumer())
    consumergroup_cmd.add_action('delete_consumer', consumergroup.DeleteConsumer())
    consumergroup_cmd.add_action('bind', consumergroup.Bind())
    consumergroup_cmd.add_action('unbind', consumergroup.Unbind())
    consumergroup_cmd.add_action('add_keyvalue', consumergroup.AddKeyValue())
    consumergroup_cmd.add_action('delete_keyvalue', consumergroup.DeleteKeyValue())
    consumergroup_cmd.add_action('update_keyvalue', consumergroup.UpdateKeyValue())
    admin.add_command('consumergroup', consumergroup_cmd)

    errata_cmd = errata.Errata()
    errata_cmd.add_action('list', errata.List())
    errata_cmd.add_action('info', errata.Info())
    errata_cmd.add_action('install', errata.Install())
    errata_cmd.add_action('create', errata.Create())
    errata_cmd.add_action('delete', errata.Delete())
    admin.add_command('errata', errata_cmd)

    package_cmd = package.Package()
    package_cmd.add_action('info', package.Info())
    package_cmd.add_action('install', package.Install())
    package_cmd.add_action('search', package.Search())
    package_cmd.add_action('deplist', package.DependencyList())
    admin.add_command('package', package_cmd)

    packagegroup_cmd = packagegroup.PackageGroup()
    packagegroup_cmd.add_action('list', packagegroup.List())
    packagegroup_cmd.add_action('info', packagegroup.Info())
    packagegroup_cmd.add_action('create', packagegroup.Create())
    packagegroup_cmd.add_action('delete', packagegroup.Delete())
    packagegroup_cmd.add_action('add_package', packagegroup.AddPackage())
    packagegroup_cmd.add_action('delete_package', packagegroup.DeletePackage())
    packagegroup_cmd.add_action('install', packagegroup.Install())
    packagegroup_cmd.add_action('install_category', packagegroup.InstallCategory())
    packagegroup_cmd.add_action('list_category', packagegroup.ListCategory())
    packagegroup_cmd.add_action('info_category', packagegroup.InfoCategory())
    packagegroup_cmd.add_action('create_category', packagegroup.CreateCategory())
    packagegroup_cmd.add_action('delete_category', packagegroup.DeleteCategory())
    packagegroup_cmd.add_action('add_group', packagegroup.AddGroupToCategory())
    packagegroup_cmd.add_action('delete_group', packagegroup.DeleteGroupFromCategory())
    packagegroup_cmd.add_action('import', packagegroup.ImportComps())
    packagegroup_cmd.add_action('export', packagegroup.ExportComps())
    admin.add_command('packagegroup', packagegroup_cmd)

    repo_cmd = repo.Repo()
    repo_cmd.add_action('list', repo.List())
    repo_cmd.add_action('status', repo.Status())
    repo_cmd.add_action('content', repo.Content())
    repo_cmd.add_action('create', repo.Create())
    repo_cmd.add_action('clone', repo.Clone())
    repo_cmd.add_action('delete', repo.Delete())
    repo_cmd.add_action('update', repo.Update())
    repo_cmd.add_action('sync', repo.Sync())
    repo_cmd.add_action('cancel_sync', repo.CancelSync())
    repo_cmd.add_action('schedules', repo.Schedules())
    repo_cmd.add_action('listkeys', repo.ListKeys())
    repo_cmd.add_action('publish', repo.Publish())
    repo_cmd.add_action('add_package', repo.AddPackages())
    repo_cmd.add_action('remove_package', repo.RemovePackages())
    repo_cmd.add_action('add_errata', repo.AddErrata())
    repo_cmd.add_action('remove_errata', repo.RemoveErrata())
    repo_cmd.add_action('add_file', repo.AddFiles())
    repo_cmd.add_action('remove_file', repo.RemoveFiles())
    admin.add_command('repo', repo_cmd)

    user_cmd = user.User()
    user_cmd.add_action('list', user.List())
    user_cmd.add_action('create', user.Create())
    user_cmd.add_action('delete', user.Delete())
    user_cmd.add_action('update', user.Update())
    admin.add_command('user', user_cmd)

    distro_cmd = distribution.Distribution()
    distro_cmd.add_action('list', distribution.List())
    distro_cmd.add_action('info', distribution.Info())
    admin.add_command('distribution', distro_cmd)

    perm_cmd = permission.Permission()
    perm_cmd.add_action('show', permission.Show())
    perm_cmd.add_action('grant', permission.Grant())
    perm_cmd.add_action('revoke', permission.Revoke())
    admin.add_command('permission', perm_cmd)

    role_cmd = role.Role()
    role_cmd.add_action('list', role.List())
    role_cmd.add_action('info', role.Info())
    role_cmd.add_action('create', role.Create())
    role_cmd.add_action('delete', role.Delete())
    role_cmd.add_action('add', role.Add())
    role_cmd.add_action('remove', role.Remove())
    admin.add_command('role', role_cmd)
    
    content_cmd = content.Content()
    content_cmd.add_action('upload', content.Upload())
    content_cmd.add_action('list', content.List())
    content_cmd.add_action('delete', content.Delete())
    admin.add_command('content', content_cmd)
    


if __name__ == "__main__":
    admin = AdminCLI()
    setup_admin(admin)
    admin.main()
